#pragma once

#include <glm/glm.hpp>
#include <SAGE.h>

#include "Core/Types.h"

namespace genzh
{
  class GameData
  {
  public:
    template<typename... Filepaths>
    static void Init(Filepaths... filepath)
    {
      sage::INIParser::AddAssociation(&GameData::Get().s_Windowed, sage::INI::ParseBool, "GameData", "Windowed");
      sage::INIParser::AddAssociation(&GameData::Get().s_XResolution, sage::INI::ParseInt32, "GameData", "XResolution");
      sage::INIParser::AddAssociation(&GameData::Get().s_YResolution, sage::INI::ParseInt32, "GameData", "YResolution");
      sage::INIParser::AddAssociation(&GameData::Get().s_MapName, sage::INI::ParseString, "GameData", "MapName");
      sage::INIParser::AddAssociation(&GameData::Get().s_MoveHintName, sage::INI::ParseString, "GameData", "MoveHintName");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseTrees, sage::INI::ParseBool, "GameData", "UseTrees");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseFPSLimit, sage::INI::ParseBool, "GameData", "UseFPSLimit");
      sage::INIParser::AddAssociation(&GameData::Get().s_DumpAssetUsage, sage::INI::ParseBool, "GameData", "DumpAssetUsage");
      sage::INIParser::AddAssociation(&GameData::Get().s_FramesPerSecondLimit, sage::INI::ParseInt32, "GameData", "FramesPerSecondLimit");
      sage::INIParser::AddAssociation(&GameData::Get().s_ChipSetType, sage::INI::ParseInt32, "GameData", "ChipsetType");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxShellScreens, sage::INI::ParseInt32, "GameData", "MaxShellScreens");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseCloudMap, sage::INI::ParseBool, "GameData", "UseCloudMap");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseLightMap, sage::INI::ParseBool, "GameData", "UseLightMap");
      sage::INIParser::AddAssociation(&GameData::Get().s_BilinearTerrainTex, sage::INI::ParseBool, "GameData", "BilinearTerrainTex");
      sage::INIParser::AddAssociation(&GameData::Get().s_TrilinearTerrainTex, sage::INI::ParseBool, "GameData", "TrilinearTerrainTex");
      sage::INIParser::AddAssociation(&GameData::Get().s_MultiPassTerrain, sage::INI::ParseBool, "GameData", "MultiPassTerrain");
      sage::INIParser::AddAssociation(&GameData::Get().s_AdjustCliffTextures, sage::INI::ParseBool, "GameData", "AdjustCliffTextures");
      sage::INIParser::AddAssociation(&GameData::Get().s_Use3WayTerrainBlends, sage::INI::ParseInt32, "GameData", "Use3WayTerrainBlends");
      sage::INIParser::AddAssociation(&GameData::Get().s_StretchTerrain, sage::INI::ParseBool, "GameData", "StretchTerrain");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseHalfHeightMap, sage::INI::ParseBool, "GameData", "UseHalfHeightMap");
      sage::INIParser::AddAssociation(&GameData::Get().s_UserDataLeafName, sage::INI::ParseQuotedString, "GameData", "UserDataLeafName");
      sage::INIParser::AddAssociation(&GameData::Get().s_DrawEntireTerrain, sage::INI::ParseBool, "GameData", "DrawEntireTerrain");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLOD, genzh::INI::ParseTerrainLOD, "GameData", "TerrainLOD");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLODTargetTimeMS, sage::INI::ParseInt32, "GameData", "TerrainLODTargetTimeMS");
      sage::INIParser::AddAssociation(&GameData::Get().s_RightMouseAlwaysScrolls, sage::INI::ParseBool, "GameData", "RightMouseAlwaysScrolls");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseWaterPlane, sage::INI::ParseBool, "GameData", "UseWaterPlane");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseCloudPlane, sage::INI::ParseBool, "GameData", "UseCloudPlane");
      sage::INIParser::AddAssociation(&GameData::Get().s_DownwindAngle, sage::INI::ParseFloat, "GameData", "DownwindAngle");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseShadowVolumes, sage::INI::ParseBool, "GameData", "UseShadowVolumes");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseShadowDecals, sage::INI::ParseBool, "GameData", "UseShadowDecals");
      sage::INIParser::AddAssociation(&GameData::Get().s_TextureReductionFactor, sage::INI::ParseInt32, "GameData", "TextureReductionFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_EnableBehindBuildingMarkers, sage::INI::ParseBool, "GameData", "UseBehindBuildingMarker");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterPositionX, sage::INI::ParseFloat, "GameData", "WaterPositionX");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterPositionY, sage::INI::ParseFloat, "GameData", "WaterPositionY");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterPositionZ, sage::INI::ParseFloat, "GameData", "WaterPositionZ");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterExtentX, sage::INI::ParseFloat, "GameData", "WaterExtentX");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterExtentY, sage::INI::ParseFloat, "GameData", "WaterExtentY");
      sage::INIParser::AddAssociation(&GameData::Get().s_WaterType, sage::INI::ParseInt32, "GameData", "WaterType");
      sage::INIParser::AddAssociation(&GameData::Get().s_FeatherWater, sage::INI::ParseInt32, "GameData", "FeatherWater");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowSoftWaterEdge, sage::INI::ParseBool, "GameData", "ShowSoftWaterEdge");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[0], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[0], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[0], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAngle[0], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[0], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[0], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[0], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange1");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[1], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[1], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[1], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAngle[1], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[1], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[1], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[1], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange2");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[2], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[2], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[2], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAngle[2], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[2], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[2], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[2], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange3");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[3], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[3], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[3], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAngle[3], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[3], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[3], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[3], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC4");
      sage::INIParser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange4");
      sage::INIParser::AddAssociation(&GameData::Get().s_SkyBoxPositionZ, sage::INI::ParseFloat, "GameData", "SkyBoxPositionZ");
      sage::INIParser::AddAssociation(&GameData::Get().s_SkyBoxScale, sage::INI::ParseFloat, "GameData", "SkyBoxScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_DrawSkyBox, sage::INI::ParseBool, "GameData", "DrawSkyBox");
      sage::INIParser::AddAssociation(&GameData::Get().s_CameraPitch, sage::INI::ParseFloat, "GameData", "CameraPitch");
      sage::INIParser::AddAssociation(&GameData::Get().s_CameraYaw, sage::INI::ParseFloat, "GameData", "CameraYaw");
      sage::INIParser::AddAssociation(&GameData::Get().s_CameraHeight, sage::INI::ParseFloat, "GameData", "CameraHeight");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxCameraHeight, sage::INI::ParseFloat, "GameData", "MaxCameraHeight");
      sage::INIParser::AddAssociation(&GameData::Get().s_MinCameraHeight, sage::INI::ParseFloat, "GameData", "MinCameraHeight");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainHeightAtEdgeOfMap, sage::INI::ParseFloat, "GameData", "TerrainHeightAtEdgeOfMap");
      sage::INIParser::AddAssociation(&GameData::Get().s_UnitDamagedThresh, sage::INI::ParseFloat, "GameData", "UnitDamagedThreshold");
      sage::INIParser::AddAssociation(&GameData::Get().s_UnitReallyDamagedThresh, sage::INI::ParseFloat, "GameData", "UnitReallyDamagedThreshold");
      sage::INIParser::AddAssociation(&GameData::Get().s_GroundStiffness, sage::INI::ParseFloat, "GameData", "GroundStiffness");
      sage::INIParser::AddAssociation(&GameData::Get().s_StructureStiffness, sage::INI::ParseFloat, "GameData", "StructureStiffness");
      sage::INIParser::AddAssociation(&GameData::Get().s_Gravity, genzh::INI::ParseFloatAcceleration, "GameData", "Gravity");
      sage::INIParser::AddAssociation(&GameData::Get().s_StealthFriendlyOpacity, sage::INI::ParseFloatPercent, "GameData", "StealthFriendlyOpacity");
      sage::INIParser::AddAssociation(&GameData::Get().s_DefaultOcclusionDelay, genzh::INI::ParseUInt32Duration, "GameData", "DefaultOcclusionDelay");
      sage::INIParser::AddAssociation(&GameData::Get().s_PartitionCellSize, sage::INI::ParseFloat, "GameData", "PartitionCellSize");
      sage::INIParser::AddAssociation(&GameData::Get().s_AmmoPipScaleFactor, sage::INI::ParseFloat, "GameData", "AmmoPipScaleFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_ContainerPipScaleFactor, sage::INI::ParseFloat, "GameData", "ContainerPipScaleFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_AmmoPipWorldOffset, sage::INI::ParseVec3Coord, "GameData", "AmmoPipWorldOffset");
      sage::INIParser::AddAssociation(&GameData::Get().s_ContainerPipWorldOffset, sage::INI::ParseVec3Coord, "GameData", "ContainerPipWorldOffset");
      sage::INIParser::AddAssociation(&GameData::Get().s_AmmoPipScreenOffset, sage::INI::ParseVec2Coord, "GameData", "AmmoPipScreenOffset");
      sage::INIParser::AddAssociation(&GameData::Get().s_ContainerPipScreenOffset, sage::INI::ParseVec2Coord, "GameData", "ContainerPipScreenOffset");
      sage::INIParser::AddAssociation(&GameData::Get().s_HistoricDamageLimit, genzh::INI::ParseUInt32Duration, "GameData", "HistoricDamageLimit");
      sage::INIParser::AddAssociation(&GameData::Get().s_HistoricDamageLimit, sage::INI::ParseInt32, "GameData", "MaxTerrainTracks");
      sage::INIParser::AddAssociation(&GameData::Get().s_TimeOfDay, genzh::INI::ParseTimeOfDay, "GameData", "TimeOfDay");
      sage::INIParser::AddAssociation(&GameData::Get().s_Weather, genzh::INI::ParseWeather, "GameData", "Weather");
      sage::INIParser::AddAssociation(&GameData::Get().s_MakeTrackMarks, sage::INI::ParseBool, "GameData", "MakeTrackMarks");
      sage::INIParser::AddAssociation(&GameData::Get().s_HideGarrisonFlags, sage::INI::ParseBool, "GameData", "HideGarrisonFlags");
      sage::INIParser::AddAssociation(&GameData::Get().s_ForceModelsToFollowTimeOfDay, sage::INI::ParseBool, "GameData", "ForceModelsToFollowTimeOfDay");
      sage::INIParser::AddAssociation(&GameData::Get().s_ForceModelsToFollowWeather, sage::INI::ParseBool, "GameData", "ForceModelsToFollowWeather");
      sage::INIParser::AddAssociation(&GameData::Get().s_LevelGainAnimationName, sage::INI::ParseString, "GameData", "LevelGainAnimationName");
      sage::INIParser::AddAssociation(&GameData::Get().s_LevelGainAnimationDisplayTimeInSeconds, sage::INI::ParseFloat, "GameData", "LevelGainAnimationTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_LevelGainAnimationZRisePerSecond, sage::INI::ParseFloat, "GameData", "LevelGainAnimationZRise");
      sage::INIParser::AddAssociation(&GameData::Get().s_GetHealedAnimationName, sage::INI::ParseString, "GameData", "GetHealedAnimationName");
      sage::INIParser::AddAssociation(&GameData::Get().s_GetHealedAnimationDisplayTimeInSeconds, sage::INI::ParseFloat, "GameData", "GetHealedAnimationTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_GetHealedAnimationZRisePerSecond, sage::INI::ParseFloat, "GameData", "GetHealedAnimationZRise");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos2");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse3");
      sage::INIParser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos3");
      sage::INIParser::AddAssociation(&GameData::Get().s_NumGlobalLights, sage::INI::ParseInt32, "GameData", "NumberGlobalLights");
      sage::INIParser::AddAssociation(&GameData::Get().s_InfantryLightScale[0], sage::INI::ParseFloat, "GameData", "InfantryLightMorningScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_InfantryLightScale[1], sage::INI::ParseFloat, "GameData", "InfantryLightAfternoonScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_InfantryLightScale[2], sage::INI::ParseFloat, "GameData", "InfantryLightEveningScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_InfantryLightScale[3], sage::INI::ParseFloat, "GameData", "InfantryLightNightScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxVisibleTranslucentObjects, sage::INI::ParseInt32, "GameData", "MaxTranslucentObjects");
      sage::INIParser::AddAssociation(&GameData::Get().s_OccludedLuminanceScale, sage::INI::ParseFloat, "GameData", "OccludedColorLuminanceScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxRoadSegments, sage::INI::ParseInt32, "GameData", "MaxRoadSegments");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxRoadVertex, sage::INI::ParseInt32, "GameData", "MaxRoadVertex");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxRoadIndex, sage::INI::ParseInt32, "GameData", "MaxRoadIndex");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxRoadTypes, sage::INI::ParseInt32, "GameData", "MaxRoadTypes");
      sage::INIParser::AddAssociation(&GameData::Get().s_BaseValuePerSupplyBox, sage::INI::ParseInt32, "GameData", "ValuePerSupplyBox");
      sage::INIParser::AddAssociation(&GameData::Get().s_AudioOn, sage::INI::ParseBool, "GameData", "AudioOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_MusicOn, sage::INI::ParseBool, "GameData", "MusicOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoundsOn, sage::INI::ParseBool, "GameData", "SoundsOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_Sounds3DOn, sage::INI::ParseBool, "GameData", "Sounds3DOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_SpeechOn, sage::INI::ParseBool, "GameData", "SpeechOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_VideoOn, sage::INI::ParseBool, "GameData", "VideoOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_DisableCameraMovement, sage::INI::ParseBool, "GameData", "DisableCameraMovements");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugAI, sage::INI::ParseBool, "GameData", "DebugAI");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugAIObstacles, sage::INI::ParseBool, "GameData", "DebugAIObstacles");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowClientPhysics, sage::INI::ParseBool, "GameData", "ShowClientPhysics");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowTerrainNormals, sage::INI::ParseBool, "GameData", "ShowTerrainNormals");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowObjectHealth, sage::INI::ParseBool, "GameData", "ShowObjectHealth");
      sage::INIParser::AddAssociation(&GameData::Get().s_ParticleScale, sage::INI::ParseFloat, "GameData", "ParticleScale");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallPrefix, sage::INI::ParseString, "GameData", "AutoFireParticleSmallPrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallSystem, sage::INI::ParseString, "GameData", "AutoFireParticleSmallSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleSmallMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumPrefix, sage::INI::ParseString, "GameData", "AutoFireParticleMediumPrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumSystem, sage::INI::ParseString, "GameData", "AutoFireParticleMediumSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleMediumMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleLargePrefix, sage::INI::ParseString, "GameData", "AutoFireParticleLargePrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleLargeSystem, sage::INI::ParseString, "GameData", "AutoFireParticleLargeSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoFireParticleLargeMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleLargeMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallPrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleSmallPrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleSmallSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleSmallMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumPrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleMediumPrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleMediumSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleMediumMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargePrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleLargePrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargeSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleLargeSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargeMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleLargeMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoAflameParticlePrefix, sage::INI::ParseString, "GameData", "AutoAflameParticlePrefix");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoAflameParticleSystem, sage::INI::ParseString, "GameData", "AutoAflameParticleSystem");
      sage::INIParser::AddAssociation(&GameData::Get().s_AutoAflameParticleMax, sage::INI::ParseInt32, "GameData", "AutoAflameParticleMax");
      sage::INIParser::AddAssociation(&GameData::Get().s_BuildSpeed, sage::INI::ParseFloat, "GameData", "BuildSpeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_MinDistFromEdgeOfMapForBuild, sage::INI::ParseFloat, "GameData", "MinDistFromEdgeOfMapForBuild");
      sage::INIParser::AddAssociation(&GameData::Get().s_SupplyBuildBorder, sage::INI::ParseFloat, "GameData", "SupplyBuildBorder");
      sage::INIParser::AddAssociation(&GameData::Get().s_AllowedHeightVariationForBuilding, sage::INI::ParseFloat, "GameData", "AllowedHeightVariationForBuilding");
      sage::INIParser::AddAssociation(&GameData::Get().s_MinLowEnergyProductionSpeed, sage::INI::ParseFloat, "GameData", "MinLowEnergyProductionSpeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxLowEnergyProductionSpeed, sage::INI::ParseFloat, "GameData", "MaxLowEnergyProductionSpeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_LowEnergyPenaltyModifier, sage::INI::ParseFloat, "GameData", "LowEnergyPenaltyModifier");
      sage::INIParser::AddAssociation(&GameData::Get().s_MultipleFactory, sage::INI::ParseFloat, "GameData", "MultipleFactory");
      sage::INIParser::AddAssociation(&GameData::Get().s_RefundPercent, sage::INI::ParseFloatPercent, "GameData", "RefundPercent");
      sage::INIParser::AddAssociation(&GameData::Get().s_CommandCenterHealRange, sage::INI::ParseFloat, "GameData", "CommandCenterHealRange");
      sage::INIParser::AddAssociation(&GameData::Get().s_CommandCenterHealAmount, sage::INI::ParseFloat, "GameData", "CommandCenterHealAmount");
      sage::INIParser::AddAssociation(&GameData::Get().s_StandardMinefieldDensity, sage::INI::ParseFloat, "GameData", "StandardMinefieldDensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_StandardMinefieldDistance, sage::INI::ParseFloat, "GameData", "StandardMinefieldDistance");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxLineBuildObjects, sage::INI::ParseInt32, "GameData", "MaxLineBuildObjects");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxTunnelCapacity, sage::INI::ParseInt32, "GameData", "MaxTunnelCapacity");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxParticleCount, sage::INI::ParseInt32, "GameData", "MaxParticleCount");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxFieldParticleCount, sage::INI::ParseInt32, "GameData", "MaxFieldParticleCount");
      sage::INIParser::AddAssociation(&GameData::Get().s_HorizontalScrollSpeedFactor, sage::INI::ParseFloat, "GameData", "HorizontalScrollSpeedFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_VerticalScrollSpeedFactor, sage::INI::ParseFloat, "GameData", "VerticalScrollSpeedFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_ScrollAmountCutoff, sage::INI::ParseFloat, "GameData", "ScrollAmountCutoff");
      sage::INIParser::AddAssociation(&GameData::Get().s_CameraAdjustSpeed, sage::INI::ParseFloat, "GameData", "CameraAdjustSpeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_EnforceMaxCameraHeight, sage::INI::ParseBool, "GameData", "EnforceMaxCameraHeight");
      sage::INIParser::AddAssociation(&GameData::Get().s_KeyboardScrollFactor, sage::INI::ParseFloat, "GameData", "KeyboardScrollSpeedFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_KeyboardDefaultScrollFactor, sage::INI::ParseFloat, "GameData", "KeyboardDefaultScrollSpeedFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_MovementPenaltyDamageState, genzh::INI::ParseBodyDamageState, "GameData", "MovementPenaltyDamageState");
      sage::INIParser::AddAssociation(&GameData::Get().s_HealthBonus[0], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Veteran");
      sage::INIParser::AddAssociation(&GameData::Get().s_HealthBonus[1], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Elite");
      sage::INIParser::AddAssociation(&GameData::Get().s_HealthBonus[2], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Heroic");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][0], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Easy");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][1], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Normal");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][2], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Hard");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][0], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Easy");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][1], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Normal");
      sage::INIParser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][2], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Hard");
      sage::INIParser::AddAssociation(GameData::ParseWeaponBonus, "GameData", "WeaponBonus");
      sage::INIParser::AddAssociation(&GameData::Get().s_DefaultStructureRubbleHeight, sage::INI::ParseFloat, "GameData", "DefaultStructureRubbleHeight");
      sage::INIParser::AddAssociation(&GameData::Get().s_FixedSeed, sage::INI::ParseInt32, "GameData", "FixedSeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShellMapName, sage::INI::ParseString, "GameData", "ShellMapName");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShellMapOn, sage::INI::ParseBool, "GameData", "ShellMapOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_PlayIntro, sage::INI::ParseBool, "GameData", "PlayIntro");
      sage::INIParser::AddAssociation(&GameData::Get().s_FirewallBehavior, sage::INI::ParseInt32, "GameData", "FirewallBehavior");
      sage::INIParser::AddAssociation(&GameData::Get().s_FirewallPortOverride, sage::INI::ParseInt32, "GameData", "FirewallPortOverride");
      sage::INIParser::AddAssociation(&GameData::Get().s_FirewallPortAllocationDelta, sage::INI::ParseInt32, "GameData", "FirewallPortAllocationDelta");
      sage::INIParser::AddAssociation(&GameData::Get().s_GroupSelectMinSelectSize, sage::INI::ParseInt32, "GameData", "GroupSelectMinSelectSize");
      sage::INIParser::AddAssociation(&GameData::Get().s_GroupSelectVolumeBase, sage::INI::ParseFloat, "GameData", "GroupSelectVolumeBase");
      sage::INIParser::AddAssociation(&GameData::Get().s_GroupSelectVolumeIncrement, sage::INI::ParseFloat, "GameData", "GroupSelectVolumeIncrement");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxUnitSelectSounds, sage::INI::ParseFloat, "GameData", "MaxUnitSelectSounds");
      sage::INIParser::AddAssociation(&GameData::Get().s_SelectionFlashSaturationFactor, sage::INI::ParseFloat, "GameData", "SelectionFlashSaturationFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_SelectionFlashHouseColor, sage::INI::ParseBool, "GameData", "SelectionFlashHouseColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_CameraAudibleRadius, sage::INI::ParseFloat, "GameData", "CameraAudibleRadius");
      sage::INIParser::AddAssociation(&GameData::Get().s_GroupMoveClickToGatherFactor, sage::INI::ParseFloat, "GameData", "GroupMoveClickToGatherAreaFactor");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeSubtleIntensity, sage::INI::ParseFloat, "GameData", "ShakeSubtleIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeNormalIntensity, sage::INI::ParseFloat, "GameData", "ShakeNormalIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeStrongIntensity, sage::INI::ParseFloat, "GameData", "ShakeStrongIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeSevereIntensity, sage::INI::ParseFloat, "GameData", "ShakeSevereIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeCineExtremeIntensity, sage::INI::ParseFloat, "GameData", "ShakeCineExtremeIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShakeCineInsaneIntensity, sage::INI::ParseFloat, "GameData", "ShakeCineInsaneIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxShakeIntensity, sage::INI::ParseFloat, "GameData", "MaxShakeIntensity");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxShakeRange, sage::INI::ParseFloat, "GameData", "MaxShakeRange");
      sage::INIParser::AddAssociation(&GameData::Get().s_SellPercentage, sage::INI::ParseFloatPercent, "GameData", "SellPercentage");
      sage::INIParser::AddAssociation(&GameData::Get().s_BaseRegenHealthPercentPerSecond, sage::INI::ParseFloatPercent, "GameData", "BaseRegenHealthPercentPerSecond");
      sage::INIParser::AddAssociation(&GameData::Get().s_BaseRegenDelay, genzh::INI::ParseUInt32Duration, "GameData", "BaseRegenDelay");
      sage::INIParser::AddAssociation(&GameData::Get().s_SpecialPowerViewObjectName, sage::INI::ParseString, "GameData", "SpecialPowerViewObject");
      sage::INIParser::AddAssociation(GameData::ParsePublicBone, "GameData", "StandardPublicBone");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowMetrics, sage::INI::ParseBool, "GameData", "ShowMetrics");
      sage::INIParser::AddAssociation(&GameData::Get().s_DefaultStartingCash, sage::INI::ParseUInt32, "GameData", "DefaultStartingCash");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShroudColor, sage::INI::ParseVec3Color, "GameData", "ShroudColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_ClearAlpha, sage::INI::ParseUInt8, "GameData", "ClearAlpha");
      sage::INIParser::AddAssociation(&GameData::Get().s_FogAlpha, sage::INI::ParseUInt8, "GameData", "FogAlpha");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShroudAlpha, sage::INI::ParseUInt8, "GameData", "ShroudAlpha");
      sage::INIParser::AddAssociation(&GameData::Get().s_HotKeyTextColor, sage::INI::ParseVec4Color, "GameData", "HotKeyTextColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_PowerBarBase, sage::INI::ParseInt32, "GameData", "PowerBarBase");
      sage::INIParser::AddAssociation(&GameData::Get().s_PowerBarIntervals, sage::INI::ParseFloat, "GameData", "PowerBarIntervals");
      sage::INIParser::AddAssociation(&GameData::Get().s_PowerBarYellowRange, sage::INI::ParseInt32, "GameData", "PowerBarYellowRange");
      sage::INIParser::AddAssociation(&GameData::Get().s_UnlookPersistDuration, genzh::INI::ParseUInt32Duration, "GameData", "UnlookPersistDuration");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkFPSHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkFPSHistoryLength");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkLatencyHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkLatencyHistoryLength");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkRunAheadMetricsTime, sage::INI::ParseInt32, "GameData", "NetworkRunAheadMetricsTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkCushionHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkCushionHistoryLength");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkRunAheadSlack, sage::INI::ParseInt32, "GameData", "NetworkRunAheadSlack");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkKeepAliveDelay, sage::INI::ParseInt32, "GameData", "NetworkKeepAliveDelay");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkDisconnectTime, sage::INI::ParseInt32, "GameData", "NetworkDisconnectTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkPlayerTimeoutTime, sage::INI::ParseInt32, "GameData", "NetworkPlayerTimeoutTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_NetworkDisconnectScreenNotifyTime, sage::INI::ParseInt32, "GameData", "NetworkDisconnectScreenNotifyTime");
      sage::INIParser::AddAssociation(&GameData::Get().s_KeyboardCameraRotateSpeed, sage::INI::ParseFloat, "GameData", "KeyboardCameraRotateSpeed");
      sage::INIParser::AddAssociation(&GameData::Get().s_PlayStats, sage::INI::ParseInt32, "GameData", "PlayStats");

#if defined(CONFIG_DEBUG) || defined(CONFIG_RELEASE)
      sage::INIParser::AddAssociation(&GameData::Get().s_DisableCameraFade, sage::INI::ParseBool, "GameData", "DisableCameraFade");
      sage::INIParser::AddAssociation(&GameData::Get().s_DisableScriptedInputDisabling, sage::INI::ParseBool, "GameData", "DisableScriptedInputDisabling");
      sage::INIParser::AddAssociation(&GameData::Get().s_DisableMilitaryCaption, sage::INI::ParseBool, "GameData", "DisableMilitaryCaption");
      sage::INIParser::AddAssociation(&GameData::Get().s_BenchmarkTimer, sage::INI::ParseInt32, "GameData", "BenchmarkTimer");
      sage::INIParser::AddAssociation(&GameData::Get().s_CheckForLeaks, sage::INI::ParseBool, "GameData", "CheckMemoryLeaks");
      sage::INIParser::AddAssociation(&GameData::Get().s_Wireframe, sage::INI::ParseBool, "GameData", "Wireframe");
      sage::INIParser::AddAssociation(&GameData::Get().s_StateMachineDebug, sage::INI::ParseBool, "GameData", "StateMachineDebug");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseCameraConstraints, sage::INI::ParseBool, "GameData", "UseCameraConstraints");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShroudOn, sage::INI::ParseBool, "GameData", "ShroudOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_FogOfWarOn, sage::INI::ParseBool, "GameData", "FogOfWarOn");
      sage::INIParser::AddAssociation(&GameData::Get().s_ShowCollisionExtents, sage::INI::ParseBool, "GameData", "ShowCollisionExtents");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugProjectileTileWidth, sage::INI::ParseFloat, "GameData", "DebugProjectileTileWidth");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugProjectileTileDuration, sage::INI::ParseInt32, "GameData", "DebugProjectileTileDuration");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugProjectileTileColor, sage::INI::ParseVec3Color, "GameData", "DebugProjectileTileColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityTileCount, sage::INI::ParseInt32, "GameData", "DebugVisibilityTileCount");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityTileWidth, sage::INI::ParseFloat, "GameData", "DebugVisibilityTileWidth");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityTileDuration, sage::INI::ParseInt32, "GameData", "DebugVisibilityTileDuration");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityTargettableColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileTargettableColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityDeshroudColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileDeshroudColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugVisibilityGapColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileGapColor");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugThreatMapTileDuration, sage::INI::ParseInt32, "GameData", "DebugThreatMapTileDuration");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugThreatMap, sage::INI::ParseUInt32, "GameData", "MaxDebugThreatMapValue");
      sage::INIParser::AddAssociation(&GameData::Get().s_DebugCashValueMapTileDuration, sage::INI::ParseInt32, "GameData", "DebugCashValueMapTileDuration");
      sage::INIParser::AddAssociation(&GameData::Get().s_MaxDebugValue, sage::INI::ParseUInt32, "GameData", "MaxDebugCashValueMapValue");
      sage::INIParser::AddAssociation(&GameData::Get().s_VTune, sage::INI::ParseBool, "GameData", "VTune");
      sage::INIParser::AddAssociation(&GameData::Get().s_SaveStats, sage::INI::ParseBool, "GameData", "SaveStats");
      sage::INIParser::AddAssociation(&GameData::Get().s_UseLocalMOTD, sage::INI::ParseBool, "GameData", "UseLocalMOTD");
      sage::INIParser::AddAssociation(&GameData::Get().s_BaseStatsDir, sage::INI::ParseBool, "GameData", "BaseStatsDir");
      sage::INIParser::AddAssociation(&GameData::Get().s_MOTDPath, sage::INI::ParseBool, "GameData", "LocalMOTDPath");
#endif
      
      (sage::INIParser::ParseFile(filepath, true), ...);
    }

  private:
    static void* ParseWeaponBonus(const std::string& val);
    static void* ParsePublicBone(const std::string& val);

    static GameData& Get() { static GameData instance; return instance; }

    GameData();
    GameData(const GameData&) = delete;
    GameData& operator=(const GameData&) = delete;
    GameData(GameData&&) = delete;
    GameData& operator=(GameData&&) = delete;

  private:
    std::string s_MapName;
    std::string s_MoveHintName;
    bool s_UseTrees = false;
    bool s_UseTreeSway = true;
    bool s_UseDrawModuleLOD = false;
    bool s_UseFPSLimit = false;
    bool s_DumpAssetUsage = false;
    int32_t s_FramesPerSecondLimit = 0;
    int32_t s_ChipSetType = 0;
    bool s_Windowed = true;
    int32_t s_XResolution = 1280;
    int32_t s_YResolution = 720;
    int32_t s_MaxShellScreens = 0;
    bool s_UseCloudMap = false;
    int32_t s_Use3WayTerrainBlends = 1;
    bool s_UseLightMap = false;
    bool s_BilinearTerrainTex = false;
    bool s_TrilinearTerrainTex = false;
    bool s_MultiPassTerrain = false;
    bool s_AdjustCliffTextures = false;
    bool s_StretchTerrain = false;
    bool s_UseHalfHeightMap = false;
    bool s_DrawEntireTerrain = false;
    TerrainLOD s_TerrainLOD = TerrainLOD::Automatic;
    bool s_EnableDynamicLOD = true;
    bool s_EnableStaticLOD = true;
    int32_t s_TerrainLODTargetTimeMS = 0;
    bool s_UseAlternateMouse;
    bool s_RightMouseAlwaysScrolls = false;
    bool s_UseWaterPlane = false;
    bool s_UseCloudPlane = false;
    bool s_UseShadowVolumes = false;
    bool s_UseShadowDecals = false;
    int32_t  s_TextureReductionFactor = -1;
    bool s_EnableBehindBuildingMarkers = true;
    float s_WaterPositionX = 0.0f;
    float s_WaterPositionY = 0.0f;
    float s_WaterPositionZ = 0.0f;
    float s_WaterExtentX = 0.0f;
    float s_WaterExtentY = 0.0f;
    int32_t	s_WaterType = 0;
    bool s_ShowSoftWaterEdge = true;
    bool s_UsingWaterTrackEditor = false;
    int32_t s_FeatherWater = false;
    std::string s_VertexWaterAvailableMaps[MAX_WATER_GRID_SETTINGS];
    float s_VertexWaterHeightClampLow[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterHeightClampHi[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAngle[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterXPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterYPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterZPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    int32_t s_VertexWaterXGridCells[MAX_WATER_GRID_SETTINGS] = { 0, 0, 0, 0 };
    int32_t s_VertexWaterYGridCells[MAX_WATER_GRID_SETTINGS] = { 0, 0, 0, 0 };
    float s_VertexWaterGridSize[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationA[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationB[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationC[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationRange[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_DownwindAngle = -0.785f;
    float s_SkyBoxPositionZ = 0.0f;
    float s_DrawSkyBox = false;
    float s_SkyBoxScale = 4.5f;
    float s_CameraPitch = 0.0f;
    float s_CameraYaw = 0.0f;
    float s_CameraHeight = 0.0f;
    float s_MaxCameraHeight = 300.0f;
    float s_MinCameraHeight = 100.0f;
    float s_TerrainHeightAtEdgeOfMap = 0.0f;
    float s_UnitDamagedThresh = 0.5f;
    float s_UnitReallyDamagedThresh = 0.1f;
    float s_GroundStiffness = 0.5f;
    float s_StructureStiffness = 0.5f;
    float s_Gravity = -1.0f;
    float s_StealthFriendlyOpacity = 0.5f;
    uint32_t s_DefaultOcclusionDelay = FPS * 3;
    bool s_PreloadAssets = false;
    bool s_PreloadEverything = false;
    bool s_PreloadReport = false;
    float s_PartitionCellSize = 0.0f;
    glm::vec3 s_AmmoPipWorldOffset;
    glm::vec3 s_ContainerPipWorldOffset;
    glm::vec2 s_AmmoPipScreenOffset;
    glm::vec2 s_ContainerPipScreenOffset;
    float s_AmmoPipScaleFactor = 1.0f;
    float s_ContainerPipScaleFactor = 1.0f;
    uint32_t s_HistoricDamageLimit = 0;
    int32_t s_MaxTerrainTracks = 0;
    int32_t s_MaxTankTrackEdges = 100;
    int32_t s_MaxTankTrackOpaqueEdges = 25;
    int32_t s_MaxTankTrackFadeDelay = 300000;
    std::string s_LevelGainAnimationName;
    float s_LevelGainAnimationDisplayTimeInSeconds = 0.0f;
    float s_LevelGainAnimationZRisePerSecond = 0.0f;
    std::string s_GetHealedAnimationName;
    float s_GetHealedAnimationDisplayTimeInSeconds = 0.0f;
    float s_GetHealedAnimationZRisePerSecond = 0.0f;
    TimeOfDay	s_TimeOfDay = TimeOfDay::Afternoon;
    Weather s_Weather = Weather::Normal;
    bool s_MakeTrackMarks = false;
    bool s_HideGarrisonFlags = false;
    bool s_ForceModelsToFollowTimeOfDay = true;
    bool s_ForceModelsToFollowWeather = true;
    TerrainLighting	s_TerrainLighting[TIME_OF_DAY_COUNT][MAX_GLOBAL_LIGHTS];
    TerrainLighting	s_TerrainObjectsLighting[TIME_OF_DAY_COUNT][MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainAmbient[MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainDiffuse[MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainLightPos[MAX_GLOBAL_LIGHTS];
    float s_InfantryLightScale[TIME_OF_DAY_COUNT] = { 1.5f, 1.5f, 1.5f, 1.5f };
    float s_ScriptOverrideInfantryLightScale = -1.0f;
    float s_SoloPlayerHealthBonusForDifficulty[PLAYERTYPE_COUNT][DIFFICULTY_COUNT] = {1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f};
    int32_t s_MaxVisibleTranslucentObjects = 512;
    int32_t s_MaxVisibleOccluderObjects = 512;
    int32_t s_MaxVisibleOccludeeObjects = 512;
    int32_t s_MaxVisibleNonOccluderOrOccludeeObjects = 512;
    float s_OccludedLuminanceScale = 0.5f;
    int32_t s_NumGlobalLights = 3;
    int32_t s_MaxRoadSegments = 0;
    int32_t s_MaxRoadVertex = 0;
    int32_t s_MaxRoadIndex = 0;
    int32_t s_MaxRoadTypes = 0;
    bool s_AudioOn = true;
    bool s_MusicOn = true;
    bool s_SoundsOn = true;
    bool s_Sounds3DOn = true;
    bool s_SpeechOn = true;
    bool s_VideoOn = true;
    bool s_DisableCameraMovement = false;
    bool s_UseFX = true;
    bool s_ShowClientPhysics = true;
    bool s_ShowTerrainNormals = false;
    uint32_t s_NoDraw = 0;
    AIDebugOptions s_DebugAI = AIDebugOptions::None;
    bool s_DebugAIObstacles = false;
    bool s_ShowObjectHealth = false;
    bool s_ScriptDebug = false;
    bool s_ParticleEdit = false;
    bool s_DisplayDebug = false;
    bool s_WinCursors = true;
    bool s_ConstantDebugUpdate = false;
    bool s_ShowTeamDot = false;
    bool s_ForceBenchmark = false;
    int32_t s_FixedSeed = -1;
    float s_ParticleScale = 1.0f;
    std::string s_AutoFireParticleSmallPrefix;
    std::string s_AutoFireParticleSmallSystem;
    int32_t s_AutoFireParticleSmallMax = 0;
    std::string s_AutoFireParticleMediumPrefix;
    std::string s_AutoFireParticleMediumSystem;
    int32_t s_AutoFireParticleMediumMax = 0;
    std::string s_AutoFireParticleLargePrefix;
    std::string s_AutoFireParticleLargeSystem;
    int32_t s_AutoFireParticleLargeMax = 0;
    std::string s_AutoSmokeParticleSmallPrefix;
    std::string s_AutoSmokeParticleSmallSystem;
    int32_t s_AutoSmokeParticleSmallMax = 0;
    std::string s_AutoSmokeParticleMediumPrefix;
    std::string s_AutoSmokeParticleMediumSystem;
    int32_t s_AutoSmokeParticleMediumMax = 0;
    std::string s_AutoSmokeParticleLargePrefix;
    std::string s_AutoSmokeParticleLargeSystem;
    int32_t s_AutoSmokeParticleLargeMax = 0;
    std::string s_AutoAflameParticlePrefix;
    std::string s_AutoAflameParticleSystem;
    int32_t s_AutoAflameParticleMax = 0;
    int32_t s_NetMinPlayers = 1;
    uint32_t s_DefaultIP = 0;
    FirewallBehavoirFlags s_FirewallBehavior = FirewallBehavoirFlags::Unknown;
    bool s_FirewallSendDelay = false;
    uint32_t s_FirewallPortOverride = 0;
    int16_t s_FirewallPortAllocationDelta = 0;
    int32_t s_BaseValuePerSupplyBox = 100;
    float s_BuildSpeed = 0.0f;
    float s_MinDistFromEdgeOfMapForBuild = 0.0f;
    float s_SupplyBuildBorder = 0.0f;
    float s_AllowedHeightVariationForBuilding = 0.0f;
    float s_MinLowEnergyProductionSpeed = 0.0f;
    float s_MaxLowEnergyProductionSpeed = 0.0f;
    float s_LowEnergyPenaltyModifier = 0.0f;
    float s_MultipleFactory = 0.0f;
    float s_RefundPercent = 0.0f;
    float s_CommandCenterHealRange = 0.0f;
    float s_CommandCenterHealAmount = 0.0f;
    int32_t s_MaxLineBuildObjects = 0;
    int32_t s_MaxTunnelCapacity = 0;
    float s_HorizontalScrollSpeedFactor = 1.0f;
    float s_VerticalScrollSpeedFactor = 1.0f;
    float s_ScrollAmountCutoff = 10.0f;
    float s_CameraAdjustSpeed = 0.1f;
    bool s_EnforceMaxCameraHeight = true;
    bool s_BuildMapCache = false;
    std::string s_InitialFile;
    std::string s_PendingFile;
    int32_t s_MaxParticleCount = 0;
    int32_t s_MaxFieldParticleCount = 30;
    WeaponBonusSet s_WeaponBonusSet;
    float s_HealthBonus[LEVEL_COUNT] = { 1.0f, 1.0f, 1.0f };
    float s_DefaultStructureRubbleHeight = 1.0f;
    std::string s_ShellMapName;
    bool s_ShellMapOn = true;
    bool s_PlayIntro = true;
    bool s_AfterIntro = false;
    bool s_AllowExitOutOfMovies = false;
    bool s_LoadScreenRender = false;
    float s_KeyboardScrollFactor = 0.5f;
    float s_KeyboardDefaultScrollFactor = 0.5f;
    float s_MusicVolumeFactor = 0.5f;
    float s_SFXVolumeFactor = 0.5f;
    float s_VoiceVolumeFactor = 0.5f;
    bool s_3DSoundPref = false;
    bool s_AnimateWindows = true;
    bool s_IncrementalAGPBuf = false;
    uint32_t s_INICRC = 0;
    uint32_t s_EXECRC = 0;
    BodyDamageState s_MovementPenaltyDamageState = BodyDamageState::ReallyDamaged;
    int32_t s_GroupSelectMinSelectSize = 5;
    float s_GroupSelectVolumeBase = 0.5f;
    float s_GroupSelectVolumeIncrement = 0.02f;
    int32_t s_MaxUnitSelectSounds = 8;
    float s_SelectionFlashSaturationFactor = 0.5f;
    bool s_SelectionFlashHouseColor = false;
    float s_CameraAudibleRadius = 500.0f;
    float s_GroupMoveClickToGatherFactor = 1.0f;
    int32_t s_AntiAliasBoxValue = 0;
    bool s_LanguageFilterPref = true;
    bool s_LoadScreenDemo = false;
    bool s_DisableRender = false;
    bool s_SaveCameraInReplay = false;
    bool s_UseCameraInReplay = false;
    float s_ShakeSubtleIntensity = 0.5f;
    float s_ShakeNormalIntensity = 1.0f;
    float s_ShakeStrongIntensity = 2.5f;
    float s_ShakeSevereIntensity = 5.0f;
    float s_ShakeCineExtremeIntensity = 8.0f;
    float s_ShakeCineInsaneIntensity = 12.0f;
    float s_MaxShakeIntensity = 10.0f;
    float s_MaxShakeRange = 150.0f;
    float s_SellPercentage = 1.0f;
    float s_BaseRegenHealthPercentPerSecond = 0.0f;
    uint32_t s_BaseRegenDelay = 0;
    glm::vec4 s_HotKeyTextColor = glm::vec4(1.0f, 1.0f, 0.0f, 1.0f);
    std::string s_SpecialPowerViewObjectName;
    std::vector<std::string> s_StandardPublicBones;
    float s_StandardMinefieldDensity = 0.01f;
    float s_StandardMinefieldDistance = 40.0f;
    bool s_ShowMetrics = false;
    int32_t s_DefaultStartingCash = 0;
    bool s_DebugShowGraphicalFramerate = false;
    int32_t s_PowerBarBase = 7;
    float s_PowerBarIntervals = 3;
    int32_t s_PowerBarYellowRange = 5;
    float s_DisplayGamma = 1.0f;
    uint32_t s_UnlookPersistDuration = 30;
    uint32_t s_DoubleClickTimeMS = 0; // Will have tore place maybe, it normally cals the win32 api function GetDoubleClickTime() to set up
    glm::vec3 s_ShroudColor = glm::vec3(1.0f, 1.0f, 1.0f);
    uint8_t s_ClearAlpha = 255;
    uint8_t s_FogAlpha = 127;
    uint8_t s_ShroudAlpha = 0;
    uint32_t s_NetworkFPSHistoryLength = 30;
    uint32_t s_NetworkLatencyHistoryLength = 200;
    uint32_t s_NetworkRunAheadMetricsTime = 500;
    uint32_t s_NetworkCushionHistoryLength = 10;
    uint32_t s_NetworkRunAheadSlack = 10;
    uint32_t s_NetworkKeepAliveDelay = 20;
    uint32_t s_NetworkDisconnectTime = 5000;
    uint32_t s_NetworkPlayerTimeoutTime = 60000;
    uint32_t s_NetworkDisconnectScreenNotifyTime = 15000;
    float s_KeyboardCameraRotateSpeed = 0.1f;
    int32_t	s_PlayStats = -1;
    bool s_IsBreakableMovie = false;
    bool s_BreakTheMovie = false;
    std::string s_ModDir;
    std::string s_ModBIG;
    std::string s_UserDataDir; // Should be set to the user's system "Documents" folder
    std::string s_UserDataLeafName;

#if defined(CONFIG_DEBUG) || defined(CONFIG_RELEASE)
    bool s_Wireframe = false;
    bool s_StateMachineDebug = false;
    bool s_UseCameraConstraints = true;
    bool s_SpecialPowerUsesDelay = true;
    bool s_ShroudOn = true;
    bool s_FogOfWarOn = false;
    bool s_JabberOn = false;
    bool s_MunkeeOn = false;
    bool s_AllowUnselectableSelection = false;
    bool s_DisableCameraFade = false;
    bool s_DisableScriptedInputDisabling = false;
    bool s_DisableMilitaryCaption = false;
    int32_t s_BenchmarkTimer = -1;
    bool s_CheckForLeaks = true;
    bool s_VTune = false;
    bool s_DebugCamera = false;
    bool s_DebugVisibility = false;
    int32_t s_DebugVisibilityTileCount = 32;
    float s_DebugVisibilityTileWidth = 10;
    int32_t s_DebugVisibilityTileDuration = FPS;
    bool s_DebugThreatMap = false;
    uint32_t s_MaxDebugThreat = 5000;
    int32_t s_DebugThreatMapTileDuration = FPS;
    bool s_DebugCashValueMap = false;
    uint32_t s_MaxDebugValue = 10000;
    int32_t s_DebugCashValueMapTileDuration = FPS;
    glm::vec3 s_DebugVisibilityTargettableColor;
    glm::vec3 s_DebugVisibilityDeshroudColor;
    glm::vec3 s_DebugVisibilityGapColor;
    bool s_DebugProjectilePath = false;
    float s_DebugProjectileTileWidth = 10;
    int32_t s_DebugProjectileTileDuration = FPS;
    glm::vec3 s_DebugProjectileTileColor;
    bool s_DebugIgnoreAsserts = true;
    bool s_DebugIgnoreStackTrace = false;
    bool s_ShowCollisionExtents = false;
    bool s_SaveStats = false;
    bool s_SaveAllStats = false;
    bool s_UseLocalMOTD = false;
    std::string s_BaseStatsDir = "./";
    std::string s_MOTDPath = "MOTD.txt";
    int32_t s_LatencyAverage;
    int32_t s_LatencyAmplitude;
    int32_t s_LatencyPeriod;
    int32_t s_LatencyNoise;
    int32_t s_PacketLoss;
#endif
  };
}