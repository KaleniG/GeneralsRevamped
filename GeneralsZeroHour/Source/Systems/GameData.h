#pragma once

#include <cstdlib>
#include <filesystem>
#include <fstream>

#include <glm/glm.hpp>
#include <SAGE.h>

#include "Core/Types.h"

namespace genzh
{
  namespace INI
  {
    void* ParseGamma(const std::string& val);
    void* ParseResolution(const std::string& val);
    void* ParseScrollFactor(const std::string& val);

    std::string SerializeGamma(void* val);
    std::string SerializeResolution(void* val);
    std::string SerializeScrollFactor(void* val);
  }

  class GameData
  {
  public:
    template<typename... Filepaths>
    static void Init(Filepaths... filepath)
    {
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Windowed, sage::INI::ParseBool, "GameData", "Windowed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Resolution.x, sage::INI::ParseInt32, "GameData", "XResolution");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Resolution.y, sage::INI::ParseInt32, "GameData", "YResolution");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MapName, sage::INI::ParseString, "GameData", "MapName");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MoveHintName, sage::INI::ParseString, "GameData", "MoveHintName");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseTrees, sage::INI::ParseBool, "GameData", "UseTrees");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseFPSLimit, sage::INI::ParseBool, "GameData", "UseFPSLimit");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DumpAssetUsage, sage::INI::ParseBool, "GameData", "DumpAssetUsage");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FramesPerSecondLimit, sage::INI::ParseInt32, "GameData", "FramesPerSecondLimit");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ChipSetType, sage::INI::ParseInt32, "GameData", "ChipsetType");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxShellScreens, sage::INI::ParseInt32, "GameData", "MaxShellScreens");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseCloudMap, sage::INI::ParseBool, "GameData", "UseCloudMap");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseLightMap, sage::INI::ParseBool, "GameData", "UseLightMap");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BilinearTerrainTex, sage::INI::ParseBool, "GameData", "BilinearTerrainTex");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TrilinearTerrainTex, sage::INI::ParseBool, "GameData", "TrilinearTerrainTex");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MultiPassTerrain, sage::INI::ParseBool, "GameData", "MultiPassTerrain");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AdjustCliffTextures, sage::INI::ParseBool, "GameData", "AdjustCliffTextures");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Use3WayTerrainBlends, sage::INI::ParseInt32, "GameData", "Use3WayTerrainBlends");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StretchTerrain, sage::INI::ParseBool, "GameData", "StretchTerrain");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseHalfHeightMap, sage::INI::ParseBool, "GameData", "UseHalfHeightMap");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DrawEntireTerrain, sage::INI::ParseBool, "GameData", "DrawEntireTerrain");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLOD, genzh::INI::ParseTerrainLOD, "GameData", "TerrainLOD");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLODTargetTimeMS, sage::INI::ParseInt32, "GameData", "TerrainLODTargetTimeMS");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_RightMouseAlwaysScrolls, sage::INI::ParseBool, "GameData", "RightMouseAlwaysScrolls");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseWaterPlane, sage::INI::ParseBool, "GameData", "UseWaterPlane");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseCloudPlane, sage::INI::ParseBool, "GameData", "UseCloudPlane");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DownwindAngle, sage::INI::ParseFloat, "GameData", "DownwindAngle");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseShadowVolumes, sage::INI::ParseBool, "GameData", "UseShadowVolumes");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseShadowDecals, sage::INI::ParseBool, "GameData", "UseShadowDecals");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TextureReductionFactor, sage::INI::ParseInt32, "GameData", "TextureReductionFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_EnableBehindBuildingMarkers, sage::INI::ParseBool, "GameData", "UseBehindBuildingMarker");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterPositionX, sage::INI::ParseFloat, "GameData", "WaterPositionX");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterPositionY, sage::INI::ParseFloat, "GameData", "WaterPositionY");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterPositionZ, sage::INI::ParseFloat, "GameData", "WaterPositionZ");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterExtentX, sage::INI::ParseFloat, "GameData", "WaterExtentX");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterExtentY, sage::INI::ParseFloat, "GameData", "WaterExtentY");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_WaterType, sage::INI::ParseInt32, "GameData", "WaterType");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FeatherWater, sage::INI::ParseInt32, "GameData", "FeatherWater");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowSoftWaterEdge, sage::INI::ParseBool, "GameData", "ShowSoftWaterEdge");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[0], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[0], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[0], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAngle[0], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[0], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[0], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[0], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[0], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[0], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange1");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[1], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[1], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[1], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAngle[1], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[1], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[1], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[1], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[1], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[1], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[2], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[2], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[2], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAngle[2], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[2], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[2], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[2], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[2], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[2], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAvailableMaps[3], sage::INI::ParseString, "GameData", "VertexWaterAvailableMaps4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampLow[3], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampLow4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterHeightClampHi[3], sage::INI::ParseFloat, "GameData", "VertexWaterHeightClampHi4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAngle[3], sage::INI::ParseFloatAngle, "GameData", "VertexWaterAngle4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterXPosition4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterYPosition4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterZPosition[3], sage::INI::ParseFloat, "GameData", "VertexWaterZPosition4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterXGridCells[3], sage::INI::ParseInt32, "GameData", "VertexWaterXGridCells4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterYGridCells[3], sage::INI::ParseInt32, "GameData", "VertexWaterYGridCells4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterGridSize[3], sage::INI::ParseFloat, "GameData", "VertexWaterGridSize4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationA[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationA4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationB[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationB4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationC[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationC4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VertexWaterAttenuationRange[3], sage::INI::ParseFloat, "GameData", "VertexWaterAttenuationRange4");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SkyBoxPositionZ, sage::INI::ParseFloat, "GameData", "SkyBoxPositionZ");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SkyBoxScale, sage::INI::ParseFloat, "GameData", "SkyBoxScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DrawSkyBox, sage::INI::ParseBool, "GameData", "DrawSkyBox");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CameraPitch, sage::INI::ParseFloat, "GameData", "CameraPitch");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CameraYaw, sage::INI::ParseFloat, "GameData", "CameraYaw");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CameraHeight, sage::INI::ParseFloat, "GameData", "CameraHeight");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxCameraHeight, sage::INI::ParseFloat, "GameData", "MaxCameraHeight");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MinCameraHeight, sage::INI::ParseFloat, "GameData", "MinCameraHeight");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainHeightAtEdgeOfMap, sage::INI::ParseFloat, "GameData", "TerrainHeightAtEdgeOfMap");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UnitDamagedThresh, sage::INI::ParseFloat, "GameData", "UnitDamagedThreshold");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UnitReallyDamagedThresh, sage::INI::ParseFloat, "GameData", "UnitReallyDamagedThreshold");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GroundStiffness, sage::INI::ParseFloat, "GameData", "GroundStiffness");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StructureStiffness, sage::INI::ParseFloat, "GameData", "StructureStiffness");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Gravity, genzh::INI::ParseFloatAcceleration, "GameData", "Gravity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StealthFriendlyOpacity, sage::INI::ParseFloatPercent, "GameData", "StealthFriendlyOpacity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DefaultOcclusionDelay, genzh::INI::ParseUInt32Duration, "GameData", "DefaultOcclusionDelay");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PartitionCellSize, sage::INI::ParseFloat, "GameData", "PartitionCellSize");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AmmoPipScaleFactor, sage::INI::ParseFloat, "GameData", "AmmoPipScaleFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ContainerPipScaleFactor, sage::INI::ParseFloat, "GameData", "ContainerPipScaleFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AmmoPipWorldOffset, sage::INI::ParseVec3Coord, "GameData", "AmmoPipWorldOffset");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ContainerPipWorldOffset, sage::INI::ParseVec3Coord, "GameData", "ContainerPipWorldOffset");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AmmoPipScreenOffset, sage::INI::ParseVec2Coord, "GameData", "AmmoPipScreenOffset");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ContainerPipScreenOffset, sage::INI::ParseVec2Coord, "GameData", "ContainerPipScreenOffset");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HistoricDamageLimit, genzh::INI::ParseUInt32Duration, "GameData", "HistoricDamageLimit");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HistoricDamageLimit, sage::INI::ParseInt32, "GameData", "MaxTerrainTracks");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TimeOfDay, genzh::INI::ParseTimeOfDay, "GameData", "TimeOfDay");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Weather, genzh::INI::ParseWeather, "GameData", "Weather");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MakeTrackMarks, sage::INI::ParseBool, "GameData", "MakeTrackMarks");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HideGarrisonFlags, sage::INI::ParseBool, "GameData", "HideGarrisonFlags");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ForceModelsToFollowTimeOfDay, sage::INI::ParseBool, "GameData", "ForceModelsToFollowTimeOfDay");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ForceModelsToFollowWeather, sage::INI::ParseBool, "GameData", "ForceModelsToFollowWeather");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_LevelGainAnimationName, sage::INI::ParseString, "GameData", "LevelGainAnimationName");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_LevelGainAnimationDisplayTimeInSeconds, sage::INI::ParseFloat, "GameData", "LevelGainAnimationTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_LevelGainAnimationZRisePerSecond, sage::INI::ParseFloat, "GameData", "LevelGainAnimationZRise");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GetHealedAnimationName, sage::INI::ParseString, "GameData", "GetHealedAnimationName");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GetHealedAnimationDisplayTimeInSeconds, sage::INI::ParseFloat, "GameData", "GetHealedAnimationTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GetHealedAnimationZRisePerSecond, sage::INI::ParseFloat, "GameData", "GetHealedAnimationZRise");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][0].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][1].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos2");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingMorningDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[0][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingMorningLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingAfternoonDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[1][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingAfternoonLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingEveningDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[2][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingEveningLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainLightingNightDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainLighting[3][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainLightingNightLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingMorningDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[0][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingMorningLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingAfternoonDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[1][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingAfternoonLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingEveningDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[2][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingEveningLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].Ambient, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightAmbient3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].Diffuse, sage::INI::ParseVec3Color, "GameData", "TerrainObjectsLightingNightDiffuse3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_TerrainObjectsLighting[3][2].LightPosition, sage::INI::ParseVec3Coord, "GameData", "TerrainObjectsLightingNightLightPos3");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NumGlobalLights, sage::INI::ParseInt32, "GameData", "NumberGlobalLights");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_InfantryLightScale[0], sage::INI::ParseFloat, "GameData", "InfantryLightMorningScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_InfantryLightScale[1], sage::INI::ParseFloat, "GameData", "InfantryLightAfternoonScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_InfantryLightScale[2], sage::INI::ParseFloat, "GameData", "InfantryLightEveningScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_InfantryLightScale[3], sage::INI::ParseFloat, "GameData", "InfantryLightNightScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxVisibleTranslucentObjects, sage::INI::ParseInt32, "GameData", "MaxTranslucentObjects");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_OccludedLuminanceScale, sage::INI::ParseFloat, "GameData", "OccludedColorLuminanceScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxRoadSegments, sage::INI::ParseInt32, "GameData", "MaxRoadSegments");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxRoadVertex, sage::INI::ParseInt32, "GameData", "MaxRoadVertex");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxRoadIndex, sage::INI::ParseInt32, "GameData", "MaxRoadIndex");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxRoadTypes, sage::INI::ParseInt32, "GameData", "MaxRoadTypes");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BaseValuePerSupplyBox, sage::INI::ParseInt32, "GameData", "ValuePerSupplyBox");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AudioOn, sage::INI::ParseBool, "GameData", "AudioOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MusicOn, sage::INI::ParseBool, "GameData", "MusicOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoundsOn, sage::INI::ParseBool, "GameData", "SoundsOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Sounds3DOn, sage::INI::ParseBool, "GameData", "Sounds3DOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SpeechOn, sage::INI::ParseBool, "GameData", "SpeechOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VideoOn, sage::INI::ParseBool, "GameData", "VideoOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DisableCameraMovement, sage::INI::ParseBool, "GameData", "DisableCameraMovements");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugAI, sage::INI::ParseBool, "GameData", "DebugAI");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugAIObstacles, sage::INI::ParseBool, "GameData", "DebugAIObstacles");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowClientPhysics, sage::INI::ParseBool, "GameData", "ShowClientPhysics");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowTerrainNormals, sage::INI::ParseBool, "GameData", "ShowTerrainNormals");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowObjectHealth, sage::INI::ParseBool, "GameData", "ShowObjectHealth");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ParticleScale, sage::INI::ParseFloat, "GameData", "ParticleScale");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallPrefix, sage::INI::ParseString, "GameData", "AutoFireParticleSmallPrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallSystem, sage::INI::ParseString, "GameData", "AutoFireParticleSmallSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleSmallMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleSmallMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumPrefix, sage::INI::ParseString, "GameData", "AutoFireParticleMediumPrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumSystem, sage::INI::ParseString, "GameData", "AutoFireParticleMediumSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleMediumMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleMediumMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleLargePrefix, sage::INI::ParseString, "GameData", "AutoFireParticleLargePrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleLargeSystem, sage::INI::ParseString, "GameData", "AutoFireParticleLargeSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoFireParticleLargeMax, sage::INI::ParseInt32, "GameData", "AutoFireParticleLargeMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallPrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleSmallPrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleSmallSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleSmallMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleSmallMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumPrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleMediumPrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleMediumSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleMediumMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleMediumMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargePrefix, sage::INI::ParseString, "GameData", "AutoSmokeParticleLargePrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargeSystem, sage::INI::ParseString, "GameData", "AutoSmokeParticleLargeSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoSmokeParticleLargeMax, sage::INI::ParseInt32, "GameData", "AutoSmokeParticleLargeMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoAflameParticlePrefix, sage::INI::ParseString, "GameData", "AutoAflameParticlePrefix");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoAflameParticleSystem, sage::INI::ParseString, "GameData", "AutoAflameParticleSystem");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AutoAflameParticleMax, sage::INI::ParseInt32, "GameData", "AutoAflameParticleMax");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BuildSpeed, sage::INI::ParseFloat, "GameData", "BuildSpeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MinDistFromEdgeOfMapForBuild, sage::INI::ParseFloat, "GameData", "MinDistFromEdgeOfMapForBuild");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SupplyBuildBorder, sage::INI::ParseFloat, "GameData", "SupplyBuildBorder");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_AllowedHeightVariationForBuilding, sage::INI::ParseFloat, "GameData", "AllowedHeightVariationForBuilding");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MinLowEnergyProductionSpeed, sage::INI::ParseFloat, "GameData", "MinLowEnergyProductionSpeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxLowEnergyProductionSpeed, sage::INI::ParseFloat, "GameData", "MaxLowEnergyProductionSpeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_LowEnergyPenaltyModifier, sage::INI::ParseFloat, "GameData", "LowEnergyPenaltyModifier");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MultipleFactory, sage::INI::ParseFloat, "GameData", "MultipleFactory");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_RefundPercent, sage::INI::ParseFloatPercent, "GameData", "RefundPercent");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CommandCenterHealRange, sage::INI::ParseFloat, "GameData", "CommandCenterHealRange");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CommandCenterHealAmount, sage::INI::ParseFloat, "GameData", "CommandCenterHealAmount");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StandardMinefieldDensity, sage::INI::ParseFloat, "GameData", "StandardMinefieldDensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StandardMinefieldDistance, sage::INI::ParseFloat, "GameData", "StandardMinefieldDistance");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxLineBuildObjects, sage::INI::ParseInt32, "GameData", "MaxLineBuildObjects");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxTunnelCapacity, sage::INI::ParseInt32, "GameData", "MaxTunnelCapacity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxParticleCount, sage::INI::ParseInt32, "GameData", "MaxParticleCount");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxFieldParticleCount, sage::INI::ParseInt32, "GameData", "MaxFieldParticleCount");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HorizontalScrollSpeedFactor, sage::INI::ParseFloat, "GameData", "HorizontalScrollSpeedFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VerticalScrollSpeedFactor, sage::INI::ParseFloat, "GameData", "VerticalScrollSpeedFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ScrollAmountCutoff, sage::INI::ParseFloat, "GameData", "ScrollAmountCutoff");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CameraAdjustSpeed, sage::INI::ParseFloat, "GameData", "CameraAdjustSpeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_EnforceMaxCameraHeight, sage::INI::ParseBool, "GameData", "EnforceMaxCameraHeight");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_KeyboardScrollFactor, sage::INI::ParseFloat, "GameData", "KeyboardScrollSpeedFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_KeyboardDefaultScrollFactor, sage::INI::ParseFloat, "GameData", "KeyboardDefaultScrollSpeedFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MovementPenaltyDamageState, genzh::INI::ParseBodyDamageState, "GameData", "MovementPenaltyDamageState");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HealthBonus[0], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Veteran");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HealthBonus[1], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Elite");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HealthBonus[2], sage::INI::ParseFloatPercent, "GameData", "HealthBonus_Heroic");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][0], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Easy");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][1], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Normal");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[0][2], sage::INI::ParseFloatPercent, "GameData", "HumanSoloPlayerHealthBonus_Hard");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][0], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Easy");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][1], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Normal");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SoloPlayerHealthBonusForDifficulty[1][2], sage::INI::ParseFloatPercent, "GameData", "AISoloPlayerHealthBonus_Hard");
      sage::INI::Parser::AddAssociation(GameData::ParseWeaponBonus, "GameData", "WeaponBonus");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DefaultStructureRubbleHeight, sage::INI::ParseFloat, "GameData", "DefaultStructureRubbleHeight");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FixedSeed, sage::INI::ParseInt32, "GameData", "FixedSeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShellMapName, sage::INI::ParseString, "GameData", "ShellMapName");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShellMapOn, sage::INI::ParseBool, "GameData", "ShellMapOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PlayIntro, sage::INI::ParseBool, "GameData", "PlayIntro");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FirewallBehavior, sage::INI::ParseInt32, "GameData", "FirewallBehavior");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FirewallPortOverride, sage::INI::ParseInt32, "GameData", "FirewallPortOverride");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FirewallPortAllocationDelta, sage::INI::ParseInt32, "GameData", "FirewallPortAllocationDelta");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GroupSelectMinSelectSize, sage::INI::ParseInt32, "GameData", "GroupSelectMinSelectSize");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GroupSelectVolumeBase, sage::INI::ParseFloat, "GameData", "GroupSelectVolumeBase");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GroupSelectVolumeIncrement, sage::INI::ParseFloat, "GameData", "GroupSelectVolumeIncrement");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxUnitSelectSounds, sage::INI::ParseFloat, "GameData", "MaxUnitSelectSounds");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SelectionFlashSaturationFactor, sage::INI::ParseFloat, "GameData", "SelectionFlashSaturationFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SelectionFlashHouseColor, sage::INI::ParseBool, "GameData", "SelectionFlashHouseColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CameraAudibleRadius, sage::INI::ParseFloat, "GameData", "CameraAudibleRadius");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_GroupMoveClickToGatherFactor, sage::INI::ParseFloat, "GameData", "GroupMoveClickToGatherAreaFactor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeSubtleIntensity, sage::INI::ParseFloat, "GameData", "ShakeSubtleIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeNormalIntensity, sage::INI::ParseFloat, "GameData", "ShakeNormalIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeStrongIntensity, sage::INI::ParseFloat, "GameData", "ShakeStrongIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeSevereIntensity, sage::INI::ParseFloat, "GameData", "ShakeSevereIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeCineExtremeIntensity, sage::INI::ParseFloat, "GameData", "ShakeCineExtremeIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShakeCineInsaneIntensity, sage::INI::ParseFloat, "GameData", "ShakeCineInsaneIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxShakeIntensity, sage::INI::ParseFloat, "GameData", "MaxShakeIntensity");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxShakeRange, sage::INI::ParseFloat, "GameData", "MaxShakeRange");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SellPercentage, sage::INI::ParseFloatPercent, "GameData", "SellPercentage");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BaseRegenHealthPercentPerSecond, sage::INI::ParseFloatPercent, "GameData", "BaseRegenHealthPercentPerSecond");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BaseRegenDelay, genzh::INI::ParseUInt32Duration, "GameData", "BaseRegenDelay");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SpecialPowerViewObjectName, sage::INI::ParseString, "GameData", "SpecialPowerViewObject");
      sage::INI::Parser::AddAssociation(GameData::ParsePublicBone, "GameData", "StandardPublicBone");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowMetrics, sage::INI::ParseBool, "GameData", "ShowMetrics");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DefaultStartingCash, sage::INI::ParseUInt32, "GameData", "DefaultStartingCash");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShroudColor, sage::INI::ParseVec3Color, "GameData", "ShroudColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ClearAlpha, sage::INI::ParseUInt8, "GameData", "ClearAlpha");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FogAlpha, sage::INI::ParseUInt8, "GameData", "FogAlpha");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShroudAlpha, sage::INI::ParseUInt8, "GameData", "ShroudAlpha");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_HotKeyTextColor, sage::INI::ParseVec4Color, "GameData", "HotKeyTextColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PowerBarBase, sage::INI::ParseInt32, "GameData", "PowerBarBase");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PowerBarIntervals, sage::INI::ParseFloat, "GameData", "PowerBarIntervals");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PowerBarYellowRange, sage::INI::ParseInt32, "GameData", "PowerBarYellowRange");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UnlookPersistDuration, genzh::INI::ParseUInt32Duration, "GameData", "UnlookPersistDuration");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkFPSHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkFPSHistoryLength");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkLatencyHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkLatencyHistoryLength");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkRunAheadMetricsTime, sage::INI::ParseInt32, "GameData", "NetworkRunAheadMetricsTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkCushionHistoryLength, sage::INI::ParseInt32, "GameData", "NetworkCushionHistoryLength");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkRunAheadSlack, sage::INI::ParseInt32, "GameData", "NetworkRunAheadSlack");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkKeepAliveDelay, sage::INI::ParseInt32, "GameData", "NetworkKeepAliveDelay");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkDisconnectTime, sage::INI::ParseInt32, "GameData", "NetworkDisconnectTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkPlayerTimeoutTime, sage::INI::ParseInt32, "GameData", "NetworkPlayerTimeoutTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_NetworkDisconnectScreenNotifyTime, sage::INI::ParseInt32, "GameData", "NetworkDisconnectScreenNotifyTime");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_KeyboardCameraRotateSpeed, sage::INI::ParseFloat, "GameData", "KeyboardCameraRotateSpeed");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_PlayStats, sage::INI::ParseInt32, "GameData", "PlayStats");

#if defined(CONFIG_DEBUG) || defined(CONFIG_RELEASE)
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DisableCameraFade, sage::INI::ParseBool, "GameData", "DisableCameraFade");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DisableScriptedInputDisabling, sage::INI::ParseBool, "GameData", "DisableScriptedInputDisabling");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DisableMilitaryCaption, sage::INI::ParseBool, "GameData", "DisableMilitaryCaption");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BenchmarkTimer, sage::INI::ParseInt32, "GameData", "BenchmarkTimer");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_CheckForLeaks, sage::INI::ParseBool, "GameData", "CheckMemoryLeaks");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_Wireframe, sage::INI::ParseBool, "GameData", "Wireframe");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_StateMachineDebug, sage::INI::ParseBool, "GameData", "StateMachineDebug");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseCameraConstraints, sage::INI::ParseBool, "GameData", "UseCameraConstraints");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShroudOn, sage::INI::ParseBool, "GameData", "ShroudOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_FogOfWarOn, sage::INI::ParseBool, "GameData", "FogOfWarOn");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_ShowCollisionExtents, sage::INI::ParseBool, "GameData", "ShowCollisionExtents");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugProjectileTileWidth, sage::INI::ParseFloat, "GameData", "DebugProjectileTileWidth");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugProjectileTileDuration, sage::INI::ParseInt32, "GameData", "DebugProjectileTileDuration");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugProjectileTileColor, sage::INI::ParseVec3Color, "GameData", "DebugProjectileTileColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityTileCount, sage::INI::ParseInt32, "GameData", "DebugVisibilityTileCount");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityTileWidth, sage::INI::ParseFloat, "GameData", "DebugVisibilityTileWidth");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityTileDuration, sage::INI::ParseInt32, "GameData", "DebugVisibilityTileDuration");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityTargettableColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileTargettableColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityDeshroudColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileDeshroudColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugVisibilityGapColor, sage::INI::ParseVec3Color, "GameData", "DebugVisibilityTileGapColor");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugThreatMapTileDuration, sage::INI::ParseInt32, "GameData", "DebugThreatMapTileDuration");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugThreatMap, sage::INI::ParseUInt32, "GameData", "MaxDebugThreatMapValue");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_DebugCashValueMapTileDuration, sage::INI::ParseInt32, "GameData", "DebugCashValueMapTileDuration");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MaxDebugValue, sage::INI::ParseUInt32, "GameData", "MaxDebugCashValueMapValue");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_VTune, sage::INI::ParseBool, "GameData", "VTune");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_SaveStats, sage::INI::ParseBool, "GameData", "SaveStats");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_UseLocalMOTD, sage::INI::ParseBool, "GameData", "UseLocalMOTD");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_BaseStatsDir, sage::INI::ParseBool, "GameData", "BaseStatsDir");
      sage::INI::Parser::AddAssociation(&GameData::Get().s_MOTDPath, sage::INI::ParseBool, "GameData", "LocalMOTDPath");
#endif
      
      (sage::INI::Parser::ParseFile(filepath, true), ...);

      GameData::Get().s_UserDataDir = sage::User::GetUserDataDirectory("Command and Conquer Generals Zero Hour Data");

      sage::CRC exeCRC;
      exeCRC.ComputeFile(sage::CommandLine::GetExecutablePath()); // could copy the orignal executable make the crc of that one and not of the current one
      uint32_t version = 1 << 16 | 0; // MAJOR(1) MINOR(0) -> idk if i want to implement it maybe later, in the codebase it hase a class apart for it @TODO, but for legacy it is needed for executable CRC, and shit i just remembered that my executable won't surely have the save crc as the original one since they will abosultely have different source code, alas will leave it implemented still
      exeCRC.Compute(&version, sizeof(version));
      exeCRC.ComputeFile("Data/Scripts/SkirmishScripts.scb");
      exeCRC.ComputeFile("Data/Scripts/MultiplayerScripts.scb");
      GameData::Get().s_EXECRC = exeCRC.Get();
      // that's just how it was in the oroginal codebase: @TODO

      sage::INI::Serializer& serializer = GameData::Get().s_Serializer;
      serializer.AddAssociation(&GameData::Get().s_UseAlternateMouse, sage::INI::ParseBool, sage::INI::SerializeBool, "UseAlternateMouse");
      serializer.AddAssociation(&GameData::Get().s_KeyboardScrollFactor, genzh::INI::ParseScrollFactor, genzh::INI::SerializeScrollFactor, "ScrollFactor");
      serializer.AddAssociation(&GameData::Get().s_DefaultIP, sage::INI::ParseIPv4Address, sage::INI::SerializeIPv4Address, "IPAddress");
      serializer.AddAssociation(&GameData::Get().s_FirewallSendDelay, sage::INI::ParseBool, sage::INI::SerializeBool, "SendDelay");
      serializer.AddAssociation(&GameData::Get().s_FirewallBehavior, sage::INI::ParseUInt32, sage::INI::SerializeUInt32, "FirewallBehavior");
      serializer.AddAssociation(&GameData::Get().s_FirewallPortAllocationDelta, sage::INI::ParseInt16, sage::INI::SerializeInt16, "FirewallPortAllocationDelta"); // Not present in the options.ini
      serializer.AddAssociation(&GameData::Get().s_FirewallPortOverride, sage::INI::ParseUInt32, sage::INI::SerializeUInt32, "FirewallPortOverride"); // Not present in the options.ini
      serializer.AddAssociation(&GameData::Get().s_SaveCameraInReplay, sage::INI::ParseBool, sage::INI::SerializeBool, "SaveCameraInReplays"); // Not present in the options.ini
      serializer.AddAssociation(&GameData::Get().s_UseCameraInReplay, sage::INI::ParseBool, sage::INI::SerializeBool, "UseCameraInReplays"); // Not present in the options.ini
      serializer.AddAssociation(&GameData::Get().s_DisplayGamma, genzh::INI::ParseGamma, genzh::INI::SerializeGamma, "Gamma"); // @TODO what do we have here, first of all it corrseponds to Brighteness in-game, second of all it is not serialized as it seems, thrid, it does not affect the brightness of the game in any visible waym duh, why does it even exist?, has to be removed/ replaced with a working one and ignored for legacy
      serializer.AddAssociation(&GameData::Get().s_Resolution, genzh::INI::ParseResolution, genzh::INI::SerializeResolution, "Resolution"); // replaced two ineger vars with one glm::ivec2 easier this way
      serializer.ParseFile(GameData::Get().s_UserDataDir / "options.ini", true);

      {
        bool foundUserIP = false;
        std::vector<asio::ip::address_v4> localIPAddresses = sage::User::GetLocalIPAddresses();
        for (const asio::ip::address_v4& ip : localIPAddresses)
          if (GameData::Get().s_DefaultIP == ip)
            foundUserIP = true;

        SAGE_ASSERT(foundUserIP, "[SYSTEM] Couldn't find the 'IPAddress' '{}' specified in '{}' on this system", GameData::Get().s_DefaultIP.to_string(), std::filesystem::path(GameData::Get().s_UserDataDir / "options.ini").string());
      }
    }

    static uint32_t GetEXECRC() { return GameData::Get().s_EXECRC; }

  private:
    static void* ParseWeaponBonus(const std::string& val);
    static void* ParsePublicBone(const std::string& val);

    static GameData& Get() { static GameData instance; return instance; }

    GameData();
    GameData(const GameData&) = delete;
    GameData& operator=(const GameData&) = delete;
    GameData(GameData&&) = delete;
    GameData& operator=(GameData&&) = delete;

  private:
    std::string s_MapName;
    std::string s_MoveHintName;
    bool s_UseTrees = false;
    bool s_UseTreeSway = true;
    bool s_UseDrawModuleLOD = false;
    bool s_UseFPSLimit = false;
    bool s_DumpAssetUsage = false;
    int32_t s_FramesPerSecondLimit = 0;
    int32_t s_ChipSetType = 0;
    bool s_Windowed = true;
    glm::ivec2 s_Resolution = glm::ivec2(1280, 720);
    int32_t s_MaxShellScreens = 0;
    bool s_UseCloudMap = false;
    int32_t s_Use3WayTerrainBlends = 1;
    bool s_UseLightMap = false;
    bool s_BilinearTerrainTex = false;
    bool s_TrilinearTerrainTex = false;
    bool s_MultiPassTerrain = false;
    bool s_AdjustCliffTextures = false;
    bool s_StretchTerrain = false;
    bool s_UseHalfHeightMap = false;
    bool s_DrawEntireTerrain = false;
    TerrainLOD s_TerrainLOD = TerrainLOD::Automatic;
    bool s_EnableDynamicLOD = true;
    bool s_EnableStaticLOD = true;
    int32_t s_TerrainLODTargetTimeMS = 0;
    bool s_UseAlternateMouse;
    bool s_RightMouseAlwaysScrolls = false;
    bool s_UseWaterPlane = false;
    bool s_UseCloudPlane = false;
    bool s_UseShadowVolumes = false;
    bool s_UseShadowDecals = false;
    int32_t  s_TextureReductionFactor = -1;
    bool s_EnableBehindBuildingMarkers = true;
    float s_WaterPositionX = 0.0f;
    float s_WaterPositionY = 0.0f;
    float s_WaterPositionZ = 0.0f;
    float s_WaterExtentX = 0.0f;
    float s_WaterExtentY = 0.0f;
    int32_t	s_WaterType = 0;
    bool s_ShowSoftWaterEdge = true;
    bool s_UsingWaterTrackEditor = false;
    int32_t s_FeatherWater = false;
    std::string s_VertexWaterAvailableMaps[MAX_WATER_GRID_SETTINGS];
    float s_VertexWaterHeightClampLow[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterHeightClampHi[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAngle[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterXPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterYPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterZPosition[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    int32_t s_VertexWaterXGridCells[MAX_WATER_GRID_SETTINGS] = { 0, 0, 0, 0 };
    int32_t s_VertexWaterYGridCells[MAX_WATER_GRID_SETTINGS] = { 0, 0, 0, 0 };
    float s_VertexWaterGridSize[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationA[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationB[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationC[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_VertexWaterAttenuationRange[MAX_WATER_GRID_SETTINGS] = { 0.0f, 0.0f, 0.0f, 0.0f };
    float s_DownwindAngle = -0.785f;
    float s_SkyBoxPositionZ = 0.0f;
    float s_DrawSkyBox = false;
    float s_SkyBoxScale = 4.5f;
    float s_CameraPitch = 0.0f;
    float s_CameraYaw = 0.0f;
    float s_CameraHeight = 0.0f;
    float s_MaxCameraHeight = 300.0f;
    float s_MinCameraHeight = 100.0f;
    float s_TerrainHeightAtEdgeOfMap = 0.0f;
    float s_UnitDamagedThresh = 0.5f;
    float s_UnitReallyDamagedThresh = 0.1f;
    float s_GroundStiffness = 0.5f;
    float s_StructureStiffness = 0.5f;
    float s_Gravity = -1.0f;
    float s_StealthFriendlyOpacity = 0.5f;
    uint32_t s_DefaultOcclusionDelay = static_cast<uint32_t>(FPS) * 3;
    bool s_PreloadAssets = false;
    bool s_PreloadEverything = false;
    bool s_PreloadReport = false;
    float s_PartitionCellSize = 0.0f;
    glm::vec3 s_AmmoPipWorldOffset;
    glm::vec3 s_ContainerPipWorldOffset;
    glm::vec2 s_AmmoPipScreenOffset;
    glm::vec2 s_ContainerPipScreenOffset;
    float s_AmmoPipScaleFactor = 1.0f;
    float s_ContainerPipScaleFactor = 1.0f;
    uint32_t s_HistoricDamageLimit = 0;
    int32_t s_MaxTerrainTracks = 0;
    int32_t s_MaxTankTrackEdges = 100;
    int32_t s_MaxTankTrackOpaqueEdges = 25;
    int32_t s_MaxTankTrackFadeDelay = 300000;
    std::string s_LevelGainAnimationName;
    float s_LevelGainAnimationDisplayTimeInSeconds = 0.0f;
    float s_LevelGainAnimationZRisePerSecond = 0.0f;
    std::string s_GetHealedAnimationName;
    float s_GetHealedAnimationDisplayTimeInSeconds = 0.0f;
    float s_GetHealedAnimationZRisePerSecond = 0.0f;
    TimeOfDay	s_TimeOfDay = TimeOfDay::Afternoon;
    Weather s_Weather = Weather::Normal;
    bool s_MakeTrackMarks = false;
    bool s_HideGarrisonFlags = false;
    bool s_ForceModelsToFollowTimeOfDay = true;
    bool s_ForceModelsToFollowWeather = true;
    TerrainLighting	s_TerrainLighting[TIME_OF_DAY_COUNT][MAX_GLOBAL_LIGHTS];
    TerrainLighting	s_TerrainObjectsLighting[TIME_OF_DAY_COUNT][MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainAmbient[MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainDiffuse[MAX_GLOBAL_LIGHTS];
    glm::vec3 s_TerrainLightPos[MAX_GLOBAL_LIGHTS];
    float s_InfantryLightScale[TIME_OF_DAY_COUNT] = { 1.5f, 1.5f, 1.5f, 1.5f };
    float s_ScriptOverrideInfantryLightScale = -1.0f;
    float s_SoloPlayerHealthBonusForDifficulty[PLAYERTYPE_COUNT][DIFFICULTY_COUNT] = {1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f};
    int32_t s_MaxVisibleTranslucentObjects = 512;
    int32_t s_MaxVisibleOccluderObjects = 512;
    int32_t s_MaxVisibleOccludeeObjects = 512;
    int32_t s_MaxVisibleNonOccluderOrOccludeeObjects = 512;
    float s_OccludedLuminanceScale = 0.5f;
    int32_t s_NumGlobalLights = 3;
    int32_t s_MaxRoadSegments = 0;
    int32_t s_MaxRoadVertex = 0;
    int32_t s_MaxRoadIndex = 0;
    int32_t s_MaxRoadTypes = 0;
    bool s_AudioOn = true;
    bool s_MusicOn = true;
    bool s_SoundsOn = true;
    bool s_Sounds3DOn = true;
    bool s_SpeechOn = true;
    bool s_VideoOn = true;
    bool s_DisableCameraMovement = false;
    bool s_UseFX = true;
    bool s_ShowClientPhysics = true;
    bool s_ShowTerrainNormals = false;
    uint32_t s_NoDraw = 0;
    AIDebugOptions s_DebugAI = AIDebugOptions::None;
    bool s_DebugAIObstacles = false;
    bool s_ShowObjectHealth = false;
    bool s_ScriptDebug = false;
    bool s_ParticleEdit = false;
    bool s_DisplayDebug = false;
    bool s_WinCursors = true;
    bool s_ConstantDebugUpdate = false;
    bool s_ShowTeamDot = false;
    bool s_ForceBenchmark = false;
    int32_t s_FixedSeed = -1;
    float s_ParticleScale = 1.0f;
    std::string s_AutoFireParticleSmallPrefix;
    std::string s_AutoFireParticleSmallSystem;
    int32_t s_AutoFireParticleSmallMax = 0;
    std::string s_AutoFireParticleMediumPrefix;
    std::string s_AutoFireParticleMediumSystem;
    int32_t s_AutoFireParticleMediumMax = 0;
    std::string s_AutoFireParticleLargePrefix;
    std::string s_AutoFireParticleLargeSystem;
    int32_t s_AutoFireParticleLargeMax = 0;
    std::string s_AutoSmokeParticleSmallPrefix;
    std::string s_AutoSmokeParticleSmallSystem;
    int32_t s_AutoSmokeParticleSmallMax = 0;
    std::string s_AutoSmokeParticleMediumPrefix;
    std::string s_AutoSmokeParticleMediumSystem;
    int32_t s_AutoSmokeParticleMediumMax = 0;
    std::string s_AutoSmokeParticleLargePrefix;
    std::string s_AutoSmokeParticleLargeSystem;
    int32_t s_AutoSmokeParticleLargeMax = 0;
    std::string s_AutoAflameParticlePrefix;
    std::string s_AutoAflameParticleSystem;
    int32_t s_AutoAflameParticleMax = 0;
    int32_t s_NetMinPlayers = 1;
    asio::ip::address_v4 s_DefaultIP;
    FirewallBehavoirFlags s_FirewallBehavior = FirewallBehavoirFlags::Unknown;
    bool s_FirewallSendDelay = false;
    uint32_t s_FirewallPortOverride = 0;
    int16_t s_FirewallPortAllocationDelta = 0;
    int32_t s_BaseValuePerSupplyBox = 100;
    float s_BuildSpeed = 0.0f;
    float s_MinDistFromEdgeOfMapForBuild = 0.0f;
    float s_SupplyBuildBorder = 0.0f;
    float s_AllowedHeightVariationForBuilding = 0.0f;
    float s_MinLowEnergyProductionSpeed = 0.0f;
    float s_MaxLowEnergyProductionSpeed = 0.0f;
    float s_LowEnergyPenaltyModifier = 0.0f;
    float s_MultipleFactory = 0.0f;
    float s_RefundPercent = 0.0f;
    float s_CommandCenterHealRange = 0.0f;
    float s_CommandCenterHealAmount = 0.0f;
    int32_t s_MaxLineBuildObjects = 0;
    int32_t s_MaxTunnelCapacity = 0;
    float s_HorizontalScrollSpeedFactor = 1.0f;
    float s_VerticalScrollSpeedFactor = 1.0f;
    float s_ScrollAmountCutoff = 10.0f;
    float s_CameraAdjustSpeed = 0.1f;
    bool s_EnforceMaxCameraHeight = true;
    bool s_BuildMapCache = false;
    std::string s_InitialFile;
    std::string s_PendingFile;
    int32_t s_MaxParticleCount = 0;
    int32_t s_MaxFieldParticleCount = 30;
    WeaponBonusSet s_WeaponBonusSet;
    float s_HealthBonus[LEVEL_COUNT] = { 1.0f, 1.0f, 1.0f };
    float s_DefaultStructureRubbleHeight = 1.0f;
    std::string s_ShellMapName;
    bool s_ShellMapOn = true;
    bool s_PlayIntro = true;
    bool s_AfterIntro = false;
    bool s_AllowExitOutOfMovies = false;
    bool s_LoadScreenRender = false;
    float s_KeyboardScrollFactor = 0.5f;
    float s_KeyboardDefaultScrollFactor = 0.5f;
    float s_MusicVolumeFactor = 0.5f;
    float s_SFXVolumeFactor = 0.5f;
    float s_VoiceVolumeFactor = 0.5f;
    bool s_3DSoundPref = false;
    bool s_AnimateWindows = true;
    bool s_IncrementalAGPBuf = false;
    uint32_t s_INICRC = 0;
    uint32_t s_EXECRC = 0;
    BodyDamageState s_MovementPenaltyDamageState = BodyDamageState::ReallyDamaged;
    int32_t s_GroupSelectMinSelectSize = 5;
    float s_GroupSelectVolumeBase = 0.5f;
    float s_GroupSelectVolumeIncrement = 0.02f;
    int32_t s_MaxUnitSelectSounds = 8;
    float s_SelectionFlashSaturationFactor = 0.5f;
    bool s_SelectionFlashHouseColor = false;
    float s_CameraAudibleRadius = 500.0f;
    float s_GroupMoveClickToGatherFactor = 1.0f;
    int32_t s_AntiAliasBoxValue = 0;
    bool s_LanguageFilterPref = true;
    bool s_LoadScreenDemo = false;
    bool s_DisableRender = false;
    bool s_SaveCameraInReplay = false;
    bool s_UseCameraInReplay = false;
    float s_ShakeSubtleIntensity = 0.5f;
    float s_ShakeNormalIntensity = 1.0f;
    float s_ShakeStrongIntensity = 2.5f;
    float s_ShakeSevereIntensity = 5.0f;
    float s_ShakeCineExtremeIntensity = 8.0f;
    float s_ShakeCineInsaneIntensity = 12.0f;
    float s_MaxShakeIntensity = 10.0f;
    float s_MaxShakeRange = 150.0f;
    float s_SellPercentage = 1.0f;
    float s_BaseRegenHealthPercentPerSecond = 0.0f;
    uint32_t s_BaseRegenDelay = 0;
    glm::vec4 s_HotKeyTextColor = glm::vec4(1.0f, 1.0f, 0.0f, 1.0f);
    std::string s_SpecialPowerViewObjectName;
    std::vector<std::string> s_StandardPublicBones;
    float s_StandardMinefieldDensity = 0.01f;
    float s_StandardMinefieldDistance = 40.0f;
    bool s_ShowMetrics = false;
    int32_t s_DefaultStartingCash = 0;
    bool s_DebugShowGraphicalFramerate = false;
    int32_t s_PowerBarBase = 7;
    float s_PowerBarIntervals = 3;
    int32_t s_PowerBarYellowRange = 5;
    float s_DisplayGamma = 1.0f;
    uint32_t s_UnlookPersistDuration = 30;
    uint32_t s_DoubleClickTimeMS = 0; // Will have tore place maybe, it normally cals the win32 api function GetDoubleClickTime() to set up
    glm::vec3 s_ShroudColor = glm::vec3(1.0f, 1.0f, 1.0f);
    uint8_t s_ClearAlpha = 255;
    uint8_t s_FogAlpha = 127;
    uint8_t s_ShroudAlpha = 0;
    uint32_t s_NetworkFPSHistoryLength = 30;
    uint32_t s_NetworkLatencyHistoryLength = 200;
    uint32_t s_NetworkRunAheadMetricsTime = 500;
    uint32_t s_NetworkCushionHistoryLength = 10;
    uint32_t s_NetworkRunAheadSlack = 10;
    uint32_t s_NetworkKeepAliveDelay = 20;
    uint32_t s_NetworkDisconnectTime = 5000;
    uint32_t s_NetworkPlayerTimeoutTime = 60000;
    uint32_t s_NetworkDisconnectScreenNotifyTime = 15000;
    float s_KeyboardCameraRotateSpeed = 0.1f;
    int32_t	s_PlayStats = -1;
    bool s_IsBreakableMovie = false;
    bool s_BreakTheMovie = false;
    std::string s_ModDir;
    std::string s_ModBIG;
    std::filesystem::path s_UserDataDir; // Should be set to the user's system "Documents" folder

#if defined(CONFIG_DEBUG) || defined(CONFIG_RELEASE)
    bool s_Wireframe = false;
    bool s_StateMachineDebug = false;
    bool s_UseCameraConstraints = true;
    bool s_SpecialPowerUsesDelay = true;
    bool s_ShroudOn = true;
    bool s_FogOfWarOn = false;
    bool s_JabberOn = false;
    bool s_MunkeeOn = false;
    bool s_AllowUnselectableSelection = false;
    bool s_DisableCameraFade = false;
    bool s_DisableScriptedInputDisabling = false;
    bool s_DisableMilitaryCaption = false;
    int32_t s_BenchmarkTimer = -1;
    bool s_CheckForLeaks = true;
    bool s_VTune = false;
    bool s_DebugCamera = false;
    bool s_DebugVisibility = false;
    int32_t s_DebugVisibilityTileCount = 32;
    float s_DebugVisibilityTileWidth = 10;
    int32_t s_DebugVisibilityTileDuration = static_cast<int32_t>(FPS);
    bool s_DebugThreatMap = false;
    uint32_t s_MaxDebugThreat = 5000;
    int32_t s_DebugThreatMapTileDuration = static_cast<int32_t>(FPS);
    bool s_DebugCashValueMap = false;
    uint32_t s_MaxDebugValue = 10000;
    int32_t s_DebugCashValueMapTileDuration = static_cast<int32_t>(FPS);
    glm::vec3 s_DebugVisibilityTargettableColor;
    glm::vec3 s_DebugVisibilityDeshroudColor;
    glm::vec3 s_DebugVisibilityGapColor;
    bool s_DebugProjectilePath = false;
    float s_DebugProjectileTileWidth = 10;
    int32_t s_DebugProjectileTileDuration = static_cast<int32_t>(FPS);
    glm::vec3 s_DebugProjectileTileColor;
    bool s_DebugIgnoreAsserts = true;
    bool s_DebugIgnoreStackTrace = false;
    bool s_ShowCollisionExtents = false;
    bool s_SaveStats = false;
    bool s_SaveAllStats = false;
    bool s_UseLocalMOTD = false;
    std::string s_BaseStatsDir = "./";
    std::string s_MOTDPath = "MOTD.txt";
    int32_t s_LatencyAverage;
    int32_t s_LatencyAmplitude;
    int32_t s_LatencyPeriod;
    int32_t s_LatencyNoise;
    int32_t s_PacketLoss;
#endif

    sage::INI::Serializer s_Serializer;
  };
}